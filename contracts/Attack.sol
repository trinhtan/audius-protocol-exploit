pragma solidity ^0.5.0;

import "./Test.sol";

contract Attack {
    address public test;

    uint256 public n;

    constructor(address _test) public {
        test = _test;
    }

    function multiCall(uint256 _a, uint256 _b) public {
        // bytes memory encodedCallData = abi.encodePacked(
        //     bytes4(keccak256(bytes('setA(uint256)'))),
        //     _a
        // );

        // (success, returnData) = (
        //     // solium-disable-next-line security/no-call-value
        //     test.call.value(0)(encodedCallData)
        // );

        // encodedCallData =  abi.encodePacked(
        //     bytes4(keccak256(bytes('setB(uint256)'))),
        //     _b
        // );


        // (success, returnData) = (
        //     // solium-disable-next-line security/no-call-value
        //     test.call.value(0)(encodedCallData)
        // );

        Test(test).setA(_a);
        Test(test).setB(_b);
    }
}
